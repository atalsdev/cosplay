---
import { getReviews } from '../lib/db';
import reviewsContent from './content/reviews.json';

interface Props {
  language: string;
  storeName?: string;
}

const { 
  language = 'en', 
  storeName = import.meta.env.PUBLIC_SITE_NAME?.toLowerCase() 
} = Astro.props;

// Fetch reviews using the separated database logic
const { reviews, error } = await getReviews(language, storeName);

// Get content for current language, fallback to English
const content = reviewsContent[language] || reviewsContent['en'];

function formatDate(months: string, content: any) {
  const monthCount = parseInt(months);
  return `${months} ${monthCount === 1 ? content.monthsAgo : content.monthsAgoPlural}`;
}

// Initially show only 3 reviews, limit total to 9
const initialReviews = reviews?.slice(0, 3);
const moreReviews = reviews?.slice(3, 9); // Only take up to 6 more reviews
const hasMoreReviews = reviews && reviews.length > 3;
const totalDisplayedReviews = Math.min(reviews?.length || 0, 9);

const theme = import.meta.env.THEME || 'default';
let styles = {};

try {
  const { luxuryComponentStyle } = await import(`../themes/${theme}/styles/components/luxury.mjs`);
  styles = luxuryComponentStyle.reviews;
} catch (error) {
  console.error('Failed to load component styles:', error);
}
---

<div class={styles.wrapper} id="reviews">
  <h2 class={styles.title}>
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
    </svg>
    {content.title}
  </h2>
  
  <div class={styles.list}>
    {/* Initial Reviews */}
    <div id="initial-reviews">
      {initialReviews && initialReviews.map((review) => (
        <div class={styles.review.wrapper}>
          <div class={styles.review.header}>
            <div class={styles.review.authorBlock}>
              <div class={styles.review.avatar}>
                <span class={styles.review.avatarText}>{review.name[0]}</span>
              </div>
              <div>
                <div class={styles.review.authorInfo.name}>{review.name}</div>
                <div class={styles.review.authorInfo.meta}>
                  {formatDate(review.date, content)}
                  {review.verified && (
                    <span class={styles.review.authorInfo.verified}>
                      {content.verifiedPurchase}
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div class={styles.review.rating}>
              {'★'.repeat(review.rating)}
              {'☆'.repeat(5 - review.rating)}
            </div>
          </div>
          <p class={styles.review.content}>{review.comment}</p>
        </div>
      ))}
    </div>

    {/* Hidden Reviews (limited to 6 more) */}
    <div id="more-reviews" class="hidden space-y-6">
      {moreReviews && moreReviews.map((review) => (
        <div class="bg-gray-50 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center gap-4">
              <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                <span class="text-blue-600 font-semibold">{review.name[0]}</span>
              </div>
              <div>
                <div class="font-medium text-gray-900">{review.name}</div>
                <div class="text-sm text-gray-500 flex items-center gap-2">
                  {formatDate(review.date, content)}
                  {review.verified && (
                    <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                      {content.verifiedPurchase}
                    </span>
                  )}
                </div>
              </div>
            </div>
            <div 
              class="flex text-yellow-400" 
              aria-label={content.ratingLabel.replace('{rating}', review.rating.toString())}
            >
              {'★'.repeat(review.rating)}
              {'☆'.repeat(5 - review.rating)}
            </div>
          </div>
          <p class="text-gray-700">{review.comment}</p>
        </div>
      ))}
    </div>

    {/* Show More Button */}
    {hasMoreReviews && (
      <div class={styles.showMore.wrapper}>
        <button id="show-more-button" class={styles.showMore.button}>
          <span id="button-text">Show More Reviews</span>
          <svg id="button-icon" class="ml-2 h-5 w-5 transform transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
      </div>
    )}

    {/* Total Reviews Count */}
    {reviews && reviews.length > 9 && (
      <div class="text-center text-sm text-gray-500 mt-4">
        Showing {totalDisplayedReviews} of {reviews.length} reviews
      </div>
    )}
  </div>
</div>

<script>
  document.addEventListener('astro:page-load', () => {
    const showMoreButton = document.getElementById('show-more-button');
    const moreReviews = document.getElementById('more-reviews');
    const buttonText = document.getElementById('button-text');
    const buttonIcon = document.getElementById('button-icon');
    let isExpanded = false;

    if (showMoreButton && moreReviews && buttonText && buttonIcon) {
      showMoreButton.addEventListener('click', () => {
        isExpanded = !isExpanded;
        moreReviews.classList.toggle('hidden');
        buttonText.textContent = isExpanded ? 'Show Less' : 'Show More Reviews';
        buttonIcon.style.transform = isExpanded ? 'rotate(180deg)' : '';
        
        if (isExpanded) {
          moreReviews.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    }
  });
</script>

<style>
  .hidden {
    display: none;
  }
</style> 