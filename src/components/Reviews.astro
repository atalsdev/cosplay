---
import { getReviews } from '../lib/db';
import reviewsContent from './content/reviews.json';

interface Props {
  language: string;
  storeName?: string;
}

const { 
  language = 'en', 
  storeName = import.meta.env.PUBLIC_SITE_NAME?.toLowerCase() 
} = Astro.props;

// Fetch reviews using the separated database logic
const { reviews, error } = await getReviews(language, storeName);

// Get content for current language, fallback to English
const content = reviewsContent[language] || reviewsContent['en'];

function formatDate(months: string, content: any) {
  const monthCount = parseInt(months);
  return `${months} ${monthCount === 1 ? content.monthsAgo : content.monthsAgoPlural}`;
}
---

<div class="border-t pt-8" id="reviews">
  <h2 class="text-2xl font-bold mb-6 flex items-center gap-2">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
    </svg>
    {content.title}
  </h2>
  
  <div class="space-y-6">
    {reviews && reviews.map((review) => (
      <div class="bg-gray-50 rounded-xl p-6 shadow-sm hover:shadow-md transition-shadow">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center gap-4">
            <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
              <span class="text-blue-600 font-semibold">{review.name[0]}</span>
            </div>
            <div>
              <div class="font-medium text-gray-900">{review.name}</div>
              <div class="text-sm text-gray-500 flex items-center gap-2">
                {formatDate(review.date, content)}
                {review.verified && (
                  <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800">
                    {content.verifiedPurchase}
                  </span>
                )}
              </div>
            </div>
          </div>
          <div 
            class="flex text-yellow-400" 
            aria-label={content.ratingLabel.replace('{rating}', review.rating.toString())}
          >
            {'★'.repeat(review.rating)}
            {'☆'.repeat(5 - review.rating)}
          </div>
        </div>
        <p class="text-gray-700">{review.comment}</p>
      </div>
    ))}
  </div>
</div> 