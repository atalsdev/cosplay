---
import featuresContent from './content/key-features.json';

interface Props {
  productTitle: string;
  language: string;
}

const { productTitle, language = 'en' } = Astro.props;

// Get PROJECT_TYPE from environment variables
const PROJECT_TYPE = import.meta.env.PROJECT_TYPE || 'default';

function getProductCategory(title: string): string {
  const title_lower = title.toLowerCase();
  
  if (PROJECT_TYPE === 'degital') {
    if (title_lower.includes('template') || title_lower.includes('theme')) {
      return 'template';
    }
    if (title_lower.includes('plugin') || title_lower.includes('extension')) {
      return 'plugin';
    }
    if (title_lower.includes('script') || title_lower.includes('code')) {
      return 'script';
    }
    return 'digital'; // default digital fallback
  }
  
  // Original physical product categories
  if (title_lower.includes('jacket') || title_lower.includes('coat')) {
    return 'jacket';
  }
  if (title_lower.includes('shoe') || title_lower.includes('boot')) {
    return 'shoes';
  }
  
  return PROJECT_TYPE === 'degital' ? 'digital' : 'jacket'; // default fallback
}

// Get content for current language or fallback to English
const content = featuresContent[language] || featuresContent.en;
const category = getProductCategory(productTitle);

// Get features for the category, fallback to English if not available in current language
const features = content.categories[category]?.features || 
                featuresContent.en.categories[category]?.features || 
                featuresContent.en.categories[PROJECT_TYPE === 'degital' ? 'digital' : 'jacket'].features; // ultimate fallback

const theme = import.meta.env.THEME || 'default';
let styles = {};

try {
  const { luxuryComponentStyle } = await import(`../themes/${theme}/styles/components/luxury.mjs`);
  styles = luxuryComponentStyle.keyFeatures;
} catch (error) {
  console.error('Failed to load component styles:', error);
}
---

<div class={styles.wrapper}>
  <h3 class={styles.title}>{content.title}</h3>
  <ul class={styles.list}>
    {features.map((feature) => (
      <li class={styles.item}>
        <svg class={styles.icon} fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span class={styles.text}>{feature}</span>
      </li>
    ))}
  </ul>
</div> 