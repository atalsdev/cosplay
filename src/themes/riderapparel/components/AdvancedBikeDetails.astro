---
interface Props {
  config: any;
}

const { config } = Astro.props;
---

<!-- Results Section -->
<div id="searchResults" class="hidden space-y-6">
  <!-- Results will be populated here -->
</div>

<!-- Loading State -->
<div id="loadingState" class="hidden">
  <div class="max-w-4xl mx-auto">
    <div class="bg-white p-8 rounded-lg shadow-md">
      <div class="animate-pulse space-y-6">
        <div class="h-6 bg-gray-200 rounded w-1/3"></div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bike Details -->
<div id="bikeInfo" class="hidden">
  <div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-lg shadow-md overflow-hidden">
      <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
        <h2 class="text-xl font-semibold text-gray-900" id="selectedBikeName"></h2>
      </div>
      <div id="bikeDetails"></div>
    </div>
  </div>
</div>

<script>
  import tableConfig from '../config/data-config.json';
  import { supabase } from '../config/supabase';
  
  const config = tableConfig;
  const filterForm = document.getElementById('filterForm');
  const searchResults = document.getElementById('searchResults');
  const loadingState = document.getElementById('loadingState');
  
  // Format functions
  const formatters = {
    currency: (value) => {
      return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        maximumFractionDigits: 0
      }).format(value);
    },
    number: (value) => {
      return new Intl.NumberFormat('en-IN').format(value);
    },
    text: (value) => value
  };

  filterForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    loadingState.classList.remove('hidden');
    searchResults.classList.add('hidden');

    try {
      let query = supabase.from(config.table_name).select('*');

      // Update the filter handling
      config.filters.forEach(filter => {
        if (filter.filterType === 'contains') {
          const value = document.getElementById(filter.field).value;
          if (value) {
            query = query.ilike(filter.field, `%${value}%`);
          }
        } else if (filter.filterType === 'range') {
          const minValue = document.getElementById(`${filter.field}_min`).value;
          const maxValue = document.getElementById(`${filter.field}_max`).value;
          
          if (minValue) {
            query = query.gte(filter.field, minValue);
          }
          if (maxValue) {
            query = query.lte(filter.field, maxValue);
          }
        } else if (filter.filterType === 'select') {
          const value = document.getElementById(filter.field).value;
          if (value) {
            query = query.eq(filter.field, value);
          }
        }
      });

      const { data, error } = await query;

      if (error) throw error;

      loadingState.classList.add('hidden');
      searchResults.classList.remove('hidden');

      if (!data || data.length === 0) {
        searchResults.innerHTML = `
          <div class="text-center text-gray-600">
            No bikes found matching your criteria.
          </div>
        `;
        return;
      }

      // Display results as cards
      searchResults.innerHTML = `
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          ${data.map(bike => `
            <div class="bg-white rounded-lg shadow-md p-6">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">${bike[config.filters[0].field]}</h3>
              <div class="space-y-2">
                ${config.outputs.slice(0, 3).map(output => `
                  <div>
                    <p class="text-sm text-gray-500">${output.label}</p>
                    <p class="font-medium">${formatters[output.type](bike[output.field])}${output.suffix ? ' ' + output.suffix : ''}</p>
                  </div>
                `).join('')}
              </div>
            </div>
          `).join('')}
        </div>
      `;
    } catch (error) {
      console.error('Error:', error);
      loadingState.classList.add('hidden');
      searchResults.classList.remove('hidden');
      searchResults.innerHTML = `
        <div class="text-center text-red-600">
          Error loading results. Please try again.
        </div>
      `;
    }
  });
</script> 