---
interface Props {
  config: any;
}

const { config } = Astro.props;
---

<!-- Loading State -->
<div id="loadingState" class="hidden">
  <div class="w-[90%] mx-auto">
    <div class="bg-white p-8 rounded-lg shadow-md">
      <div class="animate-pulse space-y-6">
        <div class="h-6 bg-gray-200 rounded w-1/3"></div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
          <div class="h-24 bg-gray-200 rounded"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Bike Details -->
<div id="bikeInfo" class="hidden">
  <div class="w-[90%] mx-auto">
    <div class="bg-white shadow-md overflow-hidden">
      <div class="border-b border-gray-200 bg-gray-50 px-6 py-4">
        <div class="w-full">
          <h2 class="text-xl font-semibold text-gray-900" id="selectedBikeName"></h2>
        </div>
      </div>
      <div id="bikeDetails"></div>
    </div>
  </div>
</div>

<!-- Add Chart.js in the head -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  import tableConfig from '../config/table-config.json';
  import { supabase } from '../config/supabase';
  import { listLayout } from '../datalayout/list';
  import { gridLayout } from '../datalayout/grid';
  import { tableLayout } from '../datalayout/table';
  import { cardsLayout } from '../datalayout/cards';
  import { dashboardLayout } from '../datalayout/dashboard';
  import { inlineLayout } from '../datalayout/inline';
  import { graphLayout } from '../datalayout/graph';
  import { chartLayout } from '../datalayout/chart';
  import { contentLayout } from '../datalayout/content';
  
  const config = tableConfig;
  
  const select = document.getElementById('itemSelect');
  const bikeInfo = document.getElementById('bikeInfo');
  const bikeDetails = document.getElementById('bikeDetails');
  const loadingState = document.getElementById('loadingState');
  const selectedBikeName = document.getElementById('selectedBikeName');

  // Format functions
  const formatters = {
    currency: (value) => {
      return new Intl.NumberFormat('en-IN', {
        style: 'currency',
        currency: 'INR',
        maximumFractionDigits: 0
      }).format(value);
    },
    number: (value) => {
      return new Intl.NumberFormat('en-IN').format(value);
    },
    text: (value) => value
  };

  // Add this function to create circular charts
  const createChart = (chartId: string, value: number, maxValue: number, label: string, color: string) => {
    const ctx = document.getElementById(chartId) as HTMLCanvasElement;
    const percentage = (value / maxValue) * 100;
    
    new Chart(ctx, {
      type: 'doughnut',
      data: {
        datasets: [{
          data: [percentage, 100 - percentage],
          backgroundColor: [color, '#E5E7EB'],
          borderWidth: 0
        }]
      },
      options: {
        cutout: '75%',
        responsive: true,
        maintainAspectRatio: true,
        plugins: {
          legend: {
            display: false
          },
          tooltip: {
            enabled: false
          }
        }
      }
    });
  };

  select?.addEventListener('change', async (e) => {
    const name = e.target.value;
    
    if (!name) {
      bikeInfo.classList.add('hidden');
      loadingState.classList.add('hidden');
      return;
    }

    loadingState.classList.remove('hidden');
    bikeInfo.classList.add('hidden');

    try {
      const { data, error } = await supabase
        .from(config.table_name)
        .select('*')
        .ilike(config.key_input, name)
        .limit(1);

      if (error) throw error;
      if (!data || data.length === 0) throw new Error('No bike found');

      const bikeData = data[0];
      
      loadingState.classList.add('hidden');
      bikeInfo.classList.remove('hidden');
      selectedBikeName.textContent = bikeData[config.key_input];

      // Generate details HTML dynamically from config
      const halfLength = Math.ceil(config.outputs.length / 2);
      const leftColumns = config.outputs.slice(0, halfLength);
      const rightColumns = config.outputs.slice(halfLength);

      // Import all layouts
      const layouts = {
        grid: gridLayout,
        list: listLayout,
        table: tableLayout,
        cards: cardsLayout,
        dashboard: dashboardLayout,
        inline: inlineLayout,
        graph: graphLayout,
        chart: chartLayout,
        content: contentLayout
      };

      const generateColumnHTML = (fields) => {
        const layout = layouts[config.layout];
        return fields.map(field => layout.field(
          field.label,
          `${formatters[field.type](bikeData[field.field])}${field.suffix ? ' ' + field.suffix : ''}`
        )).join('');
      };

      if (config.layout === 'content') {
        // Generate the specifications HTML
        const specsHTML = generateColumnHTML(config.outputs);
        
        // Insert the layout
        bikeDetails.innerHTML = contentLayout.wrapper(specsHTML);

        // Generate content sections
        const contentHTML = config.content.map(section => `
          <div class="bg-white rounded-lg shadow-md p-6">
            <h3 class="text-lg font-semibold mb-4">${section.title}</h3>
            <div class="prose max-w-none">
              <p class="text-gray-600">${section.content}</p>
            </div>
          </div>
        `).join('');

        // Insert content sections
        document.getElementById('mainContent').innerHTML = contentHTML;

        // Create the radar chart
        const ctx = document.getElementById('radarChart') as HTMLCanvasElement;
        
        // Prepare data for radar chart
        const chartData = {
          labels: config.graph.map(item => item.param),
          datasets: [{
            label: 'Characteristics',
            data: config.graph.map(item => {
              const value = bikeData[item.field];
              return (value / item.max) * 100;
            }),
            fill: true,
            backgroundColor: 'rgba(79, 70, 229, 0.2)',
            borderColor: 'rgb(79, 70, 229)',
            pointBackgroundColor: 'rgb(79, 70, 229)',
            pointBorderColor: '#fff',
            pointHoverBackgroundColor: '#fff',
            pointHoverBorderColor: 'rgb(79, 70, 229)'
          }]
        };

        new Chart(ctx, {
          type: 'radar',
          data: chartData,
          options: {
            scales: {
              r: {
                angleLines: {
                  display: true
                },
                suggestedMin: 0,
                suggestedMax: 100,
                ticks: {
                  callback: function(value) {
                    return value + '%';
                  }
                }
              }
            },
            plugins: {
              legend: {
                display: false
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const index = context.dataIndex;
                    const value = bikeData[config.graph[index].field];
                    const suffix = config.graph[index].suffix;
                    return `${value}${suffix}`;
                  }
                }
              }
            }
          }
        });
      } else {
        bikeDetails.innerHTML = layouts[config.layout].wrapper(`
          ${layouts[config.layout].section(generateColumnHTML(leftColumns))}
          ${layouts[config.layout].section(generateColumnHTML(rightColumns))}
        `);
      }
    } catch (error) {
      console.error('Error:', error);
      loadingState.classList.add('hidden');
      bikeInfo.classList.remove('hidden');
      bikeDetails.innerHTML = `
        <div class="p-6">
          <p class="text-red-600">Error loading bike details. Please try again.</p>
        </div>
      `;
    }
  });
</script> 