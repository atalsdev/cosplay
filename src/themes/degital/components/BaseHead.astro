---
import { ViewTransitions } from 'astro:transitions';
import { generateCanonicalURL, generateSchema, type SEOProps } from '../../../utils/seo';
import { getReviewStats, getReviews } from '../../../lib/db';

interface Props extends SEOProps {
  isHomePage?: boolean;
}

const { 
  title, 
  description, 
  image = '/images/social-card.jpg',
  article = false,
  publishedTime,
  modifiedTime,
  isHomePage = false
} = Astro.props;

// Get current language from URL
const currentPath = Astro.url.pathname;
const currentLang = currentPath.split('/')[1];

// Define supported languages
const supportedLanguages = ['en', 'fr', 'es', 'it', 'de', 'nl', 'pt'];

// Generate hreflang URLs
const hrefLangURLs = supportedLanguages.map(lang => ({
  lang,
  url: `${Astro.url.origin}/${lang}${currentPath.substring(3)}` // Remove current language and add new one
}));

// Set canonical URL to English version for all languages except English
const canonicalURL = currentLang === 'en' 
  ? generateCanonicalURL(Astro.url.pathname)
  : `${Astro.url.origin}/en${currentPath.substring(3)}`;

// Fetch review data if it's the homepage
let reviewSchema = null;
if (isHomePage) {
  const { stats: reviewStats, error: reviewError } = await getReviewStats(import.meta.env.PUBLIC_SITE_NAME?.toLowerCase());
  const { reviews, error: reviewsError } = await getReviews(currentLang, import.meta.env.PUBLIC_SITE_NAME?.toLowerCase());

  if (reviewStats && !reviewError && reviews && !reviewsError) {
    reviewSchema = {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": import.meta.env.PUBLIC_SITE_NAME,
      "url": Astro.url.origin,
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": reviewStats.averageRating.toFixed(1),
        "reviewCount": reviewStats.totalReviews.toString(),
        "bestRating": "5",
        "worstRating": "1"
      },
      "review": reviews.slice(0, 9).map(review => ({
        "@type": "Review",
        "author": {
          "@type": "Person",
          "name": review.name || "Anonymous"
        },
        "datePublished": new Date(Date.now() - parseInt(review.date) * 30 * 24 * 60 * 60 * 1000)
          .toISOString()
          .split('T')[0],
        "reviewRating": {
          "@type": "Rating",
          "ratingValue": review.rating.toString(),
          "bestRating": "5",
          "worstRating": "1"
        },
        "reviewBody": review.comment
      }))
    };
  }
}

const schema = generateSchema(Astro.props, Astro.url.pathname);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Language Alternates -->
{hrefLangURLs.map(({ lang, url }) => (
  <link rel="alternate" hreflang={lang} href={url} />
))}
<!-- x-default hreflang -->
<link rel="alternate" hreflang="x-default" href={`${Astro.url.origin}/en${currentPath.substring(3)}`} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={article ? 'article' : 'website'} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, canonicalURL)} />

{article && publishedTime && (
  <meta property="article:published_time" content={publishedTime} />
)}
{article && modifiedTime && (
  <meta property="article:modified_time" content={modifiedTime} />
)}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, canonicalURL)} />

<!-- Schema.org -->
<script type="application/ld+json" set:html={schema} />
{reviewSchema && (
  <script type="application/ld+json" set:html={JSON.stringify(reviewSchema)} />
)}

<!-- Fonts -->
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet" />

<ViewTransitions />

<style is:global>
  :root {
    --font-fallback: -apple-system, BlinkMacSystemFont, Segoe UI, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji;
    --font-body: 'Inter', var(--font-fallback);
    --theme-bg: #ffffff;
    --theme-text: #22272a;
    --theme-link: #2563eb;
    --theme-accent: #cc2a42;
  }

  html {
    font-family: var(--font-body);
    scroll-behavior: smooth;
  }

  body {
    margin: 0;
    padding: 0;
    text-align: left;
    background-color: var(--theme-bg);
    color: var(--theme-text);
  }
</style>