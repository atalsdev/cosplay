---
import Layout from '../../../layouts/Layout.astro';
import ProductCard from '../../../themes/default/components/ProductCard';
import { getPaginatedTranslatedProducts } from '../../../lib/shopify';
import { getPaginatedProducts } from '../../../lib/woocommerce';
import { generateCacheKey, getCachedPage, cachePageContent } from '@libs/cache';

const theme = import.meta.env.THEME || 'default';
const siteName = import.meta.env.PUBLIC_SITE_NAME;
const dataType = import.meta.env.DATA_TYPE?.toLowerCase() || 'shopify';

// Properly handle dynamic imports with default exports
const { default: BaseHead } = await import(`../../../themes/${theme}/components/BaseHead.astro`);
const { default: Header } = await import(`../../../themes/${theme}/components/Header.astro`);
const { default: Footer } = await import(`../../../themes/${theme}/components/Footer.astro`);

// Get page and locale
const page = Number(Astro.url.searchParams.get('page')) || 1;
const PRODUCTS_PER_PAGE = 20;
const { lang } = Astro.params;

// Add this helper function that doesn't use document
function stripHtml(html: string) {
  if (!html) return '';
  
  // First, remove script and style tags and their contents
  let text = html.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
  text = text.replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
  
  // Then remove all remaining HTML tags
  text = text.replace(/<[^>]+>/g, ' ');
  
  // Replace multiple spaces, newlines, and tabs with a single space
  text = text.replace(/\s+/g, ' ');
  
  // Decode HTML entities
  text = text.replace(/&nbsp;/g, ' ')
             .replace(/&amp;/g, '&')
             .replace(/&lt;/g, '<')
             .replace(/&gt;/g, '>')
             .replace(/&quot;/g, '"')
             .replace(/&#039;/g, "'");
  
  // Trim whitespace
  return text.trim();
}

// Generate cache key for this page
const cacheKey = generateCacheKey(`/collections?page=${page}`, lang);
const cachedContent = await getCachedPage(cacheKey);

if (cachedContent) {
  console.log('‚úÖ Serving cached collections page:', cacheKey);
  return new Response(cachedContent, {
    headers: {
      'Content-Type': 'text/html;charset=UTF-8',
      'X-Cache': 'HIT',
    },
  });
}

// Fetch products based on data source
let products = [];
let pagination = {
  currentPage: page,
  totalPages: 0,
  totalProducts: 0,
  hasNextPage: false,
  hasPreviousPage: false
};

try {
  if (dataType === 'shopify') {
    console.log('üõçÔ∏è Fetching from Shopify');
    const shopifyData = await getPaginatedTranslatedProducts(page, PRODUCTS_PER_PAGE, lang);
    products = shopifyData.products;
    pagination = shopifyData.pagination;
  } else if (dataType === 'woocommerce') {
    console.log('üõçÔ∏è Fetching from WooCommerce');
    const wooData = await getPaginatedProducts(page, PRODUCTS_PER_PAGE);
    
    // Transform WooCommerce data to match Shopify structure
    products = wooData.products.map(product => ({
      node: {
        id: product.id.toString(),
        title: product.name,
        handle: product.slug,
        description: stripHtml(product.description || ''),
        variants: {
          edges: [{
            node: {
              price: {
                amount: product.price,
                currencyCode: 'USD'
              },
              compareAtPrice: product.regular_price ? {
                amount: product.regular_price,
                currencyCode: 'USD'
              } : null
            }
          }]
        },
        images: {
          edges: product.images.map(image => ({
            node: {
              url: image.src,
              altText: image.alt || product.name
            }
          }))
        }
      }
    }));
    
    pagination = wooData.pagination;
  } else {
    throw new Error(`Unsupported data type: ${dataType}`);
  }
} catch (error) {
  console.error(`‚ùå Error fetching products:`, error);
  return new Response('Error fetching products', { status: 500 });
}
---

<Layout title={`Collections | ${siteName}`}>
  <Header />
  <main class="max-w-7xl mx-auto px-4 pb-8 pt-[100px]">
    <h1 class="text-3xl font-bold mb-8">Our Collections</h1>

    <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {products.map((product) => {
        // Handle both Shopify and WooCommerce data structures
        const node = product.node;
        const price = dataType === 'shopify' 
          ? (node.variants?.edges?.[0]?.node?.price?.amount || 
             node.priceRange?.minVariantPrice?.amount || 
             '0')
          : node.variants.edges[0].node.price.amount;
          
        const compareAtPrice = dataType === 'shopify'
          ? node.variants?.edges?.[0]?.node?.compareAtPrice?.amount
          : node.variants.edges[0].node.compareAtPrice?.amount;
          
        const imageUrl = dataType === 'shopify'
          ? node.images?.edges?.[0]?.node?.url
          : node.images.edges[0].node.url;
        
        return (
          <ProductCard
            client:load
            id={node.id}
            title={node.title}
            price={parseFloat(price)}
            compareAtPrice={compareAtPrice ? parseFloat(compareAtPrice) : undefined}
            image={imageUrl}
            imageAlt={node.title}
            description={node.description}
            handle={node.handle}
            lang={lang}
          />
        );
      })}
    </div>

    <!-- Pagination -->
    <div class="flex justify-center items-center gap-4 mt-12">
      {pagination.hasPreviousPage && (
        <a
          href={`/${lang}/collections?page=${page - 1}`}
          class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          Previous
        </a>
      )}
      
      <span class="text-gray-600">
        Page {pagination.currentPage} of {pagination.totalPages}
      </span>
      
      {pagination.hasNextPage && (
        <a
          href={`/${lang}/collections?page=${page + 1}`}
          class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
        >
          Next
        </a>
      )}
    </div>

    <div class="text-center text-sm text-gray-500 mt-4">
      Showing {(page - 1) * PRODUCTS_PER_PAGE + 1} - {Math.min(page * PRODUCTS_PER_PAGE, pagination.totalProducts)} 
      of {pagination.totalProducts} products
    </div>
  </main>
  <Footer />
</Layout>

<script>
  // Handle dynamic loading states
  document.addEventListener('astro:page-load', () => {
    const grid = document.querySelector('.grid');
    if (grid) {
      grid.classList.add('fade-in');
    }
  });
</script>

<style>
  .fade-in {
    animation: fadeIn 0.5s ease-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
</style>