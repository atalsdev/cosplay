---
import Layout from '@layouts/Layoutp.astro';
import { getTranslatedProductByHandle } from '@libs/shopify';
import AddToCart from '@themes/default/components/AddToCart';
import SizeChart from '@components/SizeChart.astro';
import Reviews from '@components/Reviews.astro';
import ProductFAQ from '@components/ProductFAQ.astro';
import { ChevronLeft, ChevronRight, Info } from 'lucide-react';
import ProductCard from '@themes/default/components/ProductCard';
import BaseHead from '@themes/default/components/BaseHead.astro';
import ProductSpecs from '@components/ProductSpecs.astro';
import KeyFeatures from '@components/KeyFeatures.astro';
import ProductLoading from '@components/ProductLoading.astro';
import { useCurrencyStore } from '../../../store/currency';
import { getReviewStats, getReviews } from '../../../lib/db';
import { generateCacheKey, getCachedPage, cachePageContent } from '@libs/cache';

const { lang, handle } = Astro.params;
const supportedLanguages = ['en', 'fr', 'de', 'es', 'it'];
let product;
let relatedProducts;
let error;

// Generate cache key
const cacheKey = generateCacheKey(`/products/${handle}`, lang);

// Try to get cached version
const cachedContent = await getCachedPage(cacheKey);

if (cachedContent) {
  console.log('✅ Serving cached page:', cacheKey);
  return new Response(cachedContent, {
    headers: {
      'Content-Type': 'text/html;charset=UTF-8',
      'X-Cache': 'HIT',
    },
  });
}

// If no cache, proceed with normal rendering
console.log(`🔍 Fetching product: ${handle} in language: ${lang}`);

try {
  const { product: translatedProduct, relatedProducts: translatedRelated } = 
    await getTranslatedProductByHandle(handle, lang);
    
  if (!translatedProduct) {
    console.error(`❌ No product found for ${handle} in ${lang}`);
    error = `Product not available in ${lang}`;
  } else {
    console.log(`✅ Successfully fetched ${lang} version`);
    product = translatedProduct;
    relatedProducts = translatedRelated;
  }

  if (!product) {
    error = 'Product not found';
    console.error(`❌ Product not found: ${handle}`);
    return new Response(null, {
      status: 404,
      statusText: 'Product not found'
    });
  }

  // Validate and process product data
  const images = product?.images?.edges?.map(edge => edge.node) || [];
  const variants = product?.variants?.edges?.map(edge => ({
    ...edge.node,
    availableForSale: true
  })) || [];
  const options = product?.options || [];

  // Detailed validation with specific error messages
  if (images.length === 0) {
    console.error(`❌ No images found for product: ${handle}`);
    error = 'Product images not available';
  }
  
  if (variants.length === 0) {
    console.error(`❌ No variants available for product: ${handle}`);
    console.log('Product data:', JSON.stringify(product, null, 2));
    error = 'Product variants not available';
  }

  if (error) {
    return new Response(null, {
      status: 404,
      statusText: error
    });
  }

  // Assign processed data back to product for template use
  product.processedImages = images;
  product.processedVariants = variants;
  product.processedOptions = options;

} catch (e) {
  console.error(`❌ Error processing product:`, {
    handle,
    language: lang,
    error: e.message,
    stack: e.stack,
    productData: product
  });
  
  return new Response(null, {
    status: 404,
    statusText: `Failed to process product: ${e.message}`
  });
}

// Final validation before rendering
if (!product || !product.processedImages || !product.processedVariants) {
  console.error(`❌ Invalid processed data structure:`, { 
    product,
    hasImages: !!product?.processedImages,
    hasVariants: !!product?.processedVariants
  });
  return new Response(null, {
    status: 404,
    statusText: 'Invalid processed data'
  });
}

// Define European language to currency mapping
const europeanCurrencies = {
  'fr': 'EUR',
  'it': 'EUR',
  'de': 'EUR',
  'es': 'EUR',
  // Add more European languages as needed
};

// Function to get appropriate currency based on language
const getCurrencyForLanguage = (language: string) => {
  return europeanCurrencies[language] || 'GBP'; // Default to GBP since data is in GBP
};

// Convert GBP to EUR if needed
const convertGBPToEUR = (priceAmount: string) => {
  const rate = 1.17; // GBP to EUR conversion rate
  return parseFloat(priceAmount) * rate;
};

// Get currency for current language
const currentCurrency = getCurrencyForLanguage(lang);

// Process price for meta tags
const originalPrice = product.processedVariants[0].price;
const priceInEUR = europeanCurrencies[lang] 
  ? convertGBPToEUR(originalPrice.amount)
  : parseFloat(originalPrice.amount);

const metaPrice = {
  amount: priceInEUR.toFixed(2),
  currency: currentCurrency
};

// Get review stats and reviews first
const { stats: reviewStats, error: reviewError } = await getReviewStats(import.meta.env.PUBLIC_SITE_NAME?.toLowerCase());
const { reviews, error: reviewsError } = await getReviews(lang, import.meta.env.PUBLIC_SITE_NAME?.toLowerCase());

if (reviewError) {
  console.error('Error fetching review stats:', reviewError);
}

if (reviewsError) {
  console.error('Error fetching reviews:', reviewsError);
}

// Then generate the schema with currency conversion
const productSchema = {
  "@context": "https://schema.org/",
  "@type": "Product",
  "name": product.title,
  "description": product.description,
  "image": product.processedImages.map(img => img.url),
  "sku": product.id,
  "offers": {
    "@type": "Offer",
    "price": metaPrice.amount,
    "priceCurrency": metaPrice.currency,
    "availability": product.processedVariants[0].availableForSale 
      ? "https://schema.org/InStock" 
      : "https://schema.org/OutOfStock",
    "priceValidUntil": new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    "url": Astro.url.href
  },
  "aggregateRating": reviewStats ? {
    "@type": "AggregateRating",
    "ratingValue": reviewStats.averageRating.toFixed(1),
    "reviewCount": reviewStats.totalReviews.toString()
  } : undefined,
  "review": reviews?.slice(0, 9).map(review => ({
    "@type": "Review",
    "author": {
      "@type": "Person",
      "name": review.name
    },
    "datePublished": new Date(Date.now() - parseInt(review.date) * 30 * 24 * 60 * 60 * 1000)
      .toISOString()
      .split('T')[0],
    "reviewRating": {
      "@type": "Rating",
      "ratingValue": review.rating.toString()
    },
    "reviewBody": review.comment
  })) || []
};

// Remove undefined properties from schema
const cleanSchema = JSON.parse(JSON.stringify(productSchema));

// Generate breadcrumb schema
const breadcrumbSchema = {
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": `${Astro.url.origin}/${lang}`
    },
    {
      "@type": "ListItem",
      "position": 2,
      "name": "Products",
      "item": `${Astro.url.origin}/${lang}/products`
    },
    {
      "@type": "ListItem",
      "position": 3,
      "name": product.title,
      "item": Astro.url.href
    }
  ]
};

// Generate alternate language URLs
const alternateUrls = supportedLanguages.map(l => ({
  lang: l,
  url: `${Astro.url.origin}/${l}/products/${handle}`
}));

// Meta description optimization
const metaDescription = `Buy ${product.title} - ${
  product.description
    .slice(0, 150)
    .replace(/[^\w\s-]/g, '')
    .trim()
}...`;

// Process the product data before passing to components
const processProductData = (rawProduct) => {
  // Ensure variants are properly structured
  const processedVariants = rawProduct.variants.edges.map(edge => ({
    ...edge.node,
    selectedOptions: edge.node.selectedOptions,
    image: edge.node.image ? {
      id: edge.node.image.id,
      altText: edge.node.image.altText
    } : null
  }));

  // Ensure images are properly structured
  const processedImages = rawProduct.images.edges.map(edge => ({
    id: edge.node.id,
    url: edge.node.url,
    altText: edge.node.altText || rawProduct.title
  }));

  return {
    id: rawProduct.id,
    title: rawProduct.title,
    variants: processedVariants,
    options: rawProduct.options,
    image: processedImages[0]?.url,
    images: processedImages,
  };
};

// Process the product data
const processedProduct = product ? processProductData(product) : null;

// Debug logging
console.log('Processed product data:', {
  variants: processedProduct?.variants.length,
  images: processedProduct?.images.length,
  options: processedProduct?.options
});

// Get initial currency data
const initialCurrency = 'USD'; // Or get from store/session

---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <BaseHead 
      title={product.seo?.title || `${product.title} | RidWear`}
      description={product.seo?.description || metaDescription}
      image={product.processedImages[0].url}
      isProduct={true}
      price={metaPrice}
      availability={product.processedVariants[0].availableForSale}
    />
    
    <!-- Resource Hints -->
    <link rel="preconnect" href="https://cdn.shopify.com" />
    <link rel="dns-prefetch" href="https://cdn.shopify.com" />
    
    <!-- Preload critical assets -->
    <link 
      rel="preload" 
      as="image" 
      href={product.processedImages[0].url}
      fetchpriority="high"
    />
    
    <!-- Preload critical fonts -->
    <link
      rel="preload"
      href="/fonts/inter-var.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    
    <!-- Defer non-critical CSS -->
    <link 
      rel="stylesheet" 
      href="/styles/non-critical.css"
      media="print" 
      onload="this.media='all'"
    />
    
    <!-- Additional SEO Meta Tags -->
    <meta name="robots" content="index, follow" />
    <meta name="format-detection" content="telephone=no" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    
    <!-- Open Graph Product Specific -->
    <meta property="og:price:amount" content={metaPrice.amount} />
    <meta property="og:price:currency" content={metaPrice.currency} />
    <meta property="product:availability" content={product.processedVariants[0].availableForSale ? "in stock" : "out of stock"} />
    
    <!-- Language variants -->
    {alternateUrls.map(({ lang, url }) => (
      <link rel="alternate" hreflang={lang} href={url} />
    ))}
    <link rel="alternate" hreflang="x-default" href={`${Astro.url.origin}/en/products/${handle}`} />
    
    <!-- Additional Schema Markup -->
    <script type="application/ld+json" set:html={JSON.stringify(productSchema)} />
    <script type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
    
    <!-- Mobile Optimization -->
    <link rel="preload" as="image" href={product.processedImages[0].url} />
    {product.processedImages.slice(1).map(img => (
      <link rel="prefetch" as="image" href={img.url} />
    ))}
    
    <!-- PWA Tags -->
    <meta name="theme-color" content="#ffffff" />
    <link rel="manifest" href="/manifest.json" />
  </head>
  <body>
    <Layout title={`${product.title} | RidWear`}>
      <div id="product-wrapper" class="relative">
        <div 
          id="product-content" 
          class="opacity-100 transition-opacity duration-300"
          data-handle={handle}
        >
          <!-- Breadcrumb Navigation -->
          <nav aria-label="Breadcrumb" class="max-w-7xl mx-auto px-4 py-4 overflow-x-auto">
            <ol class="flex flex-nowrap items-center text-sm text-gray-600 whitespace-nowrap min-w-0">
              <li class="flex items-center">
                <a href={`/${lang}`} class="hover:text-blue-600 truncate">Home</a>
              </li>
              <li class="flex items-center">
                <svg class="h-5 w-5 text-gray-400 mx-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <a href={`/${lang}/products`} class="hover:text-blue-600 truncate">Products</a>
              </li>
              <li class="flex items-center">
                <svg class="h-5 w-5 text-gray-400 mx-1" viewBox="0 0 20 20" fill="currentColor">
                  <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
                <span class="text-gray-900 truncate" title={product.title}>{product.title}</span>
              </li>
            </ol>
          </nav>

          <main class="max-w-7xl mx-auto px-4 py-12">
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-12">
              <!-- Image Gallery -->
              <div class="space-y-4 lg:sticky lg:top-24 lg:self-start">
                <div class="relative bg-gray-50 rounded-2xl overflow-hidden group">
                  <div class="aspect-square relative">
                    <img
                      id="mainImage"
                      src={`${product.processedImages[0].url}&width=800`}
                      alt={product.title}
                      class="w-full h-full object-contain absolute inset-0"
                      loading="eager"
                      fetchpriority="high"
                      width="800"
                      height="800"
                      decoding="async"
                      sizes="(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 800px"
                      srcset={`
                        ${product.processedImages[0].url}&width=400 400w,
                        ${product.processedImages[0].url}&width=800 800w,
                        ${product.processedImages[0].url}&width=1200 1200w
                      `}
                    />
                  </div>
                  
                  <!-- Navigation Arrows -->
                  <button 
                    id="prevImage" 
                    class="absolute left-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/80 backdrop-blur-sm 
                           shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200
                           hover:bg-white focus:outline-none focus:ring-2 focus:ring-blue-500
                           disabled:opacity-30 disabled:cursor-not-allowed"
                    aria-label="Previous image"
                  >
                    <ChevronLeft className="w-6 h-6 text-gray-700" />
                  </button>
                  
                  <button 
                    id="nextImage" 
                    class="absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-full bg-white/80 backdrop-blur-sm 
                           shadow-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200
                           hover:bg-white focus:outline-none focus:ring-2 focus:ring-blue-500
                           disabled:opacity-30 disabled:cursor-not-allowed"
                    aria-label="Next image"
                  >
                    <ChevronRight className="w-6 h-6 text-gray-700" />
                  </button>
                </div>

                <!-- Thumbnails -->
                <div class="flex gap-2 overflow-x-auto pb-2 snap-x scrollbar-hide">
                  {product.processedImages.map((image, index) => (
                    <button
                      key={image.id}
                      data-image-url={`${image.url}&width=800`}
                      data-image-srcset={`
                        ${image.url}&width=400 400w,
                        ${image.url}&width=800 800w,
                        ${image.url}&width=1200 1200w
                      `}
                      data-image-id={image.id}
                      data-image-index={index}
                      class={`relative flex-none aspect-square w-20 rounded-lg overflow-hidden snap-start
                              ${index === 0 ? 'ring-2 ring-blue-500' : 'hover:ring-2 hover:ring-gray-300'}
                              transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500`}
                    >
                      <img
                        src={`${image.url}&width=80`}
                        alt={`${product.title} - View ${index + 1}`}
                        class="absolute inset-0 w-full h-full object-cover"
                        loading={index === 0 ? "eager" : "lazy"}
                        width="80"
                        height="80"
                        decoding="async"
                      />
                    </button>
                  ))}
                </div>
              </div>

              <!-- Product Info -->
              <div class="space-y-8 relative" style="z-index: 50;">
                <div>
                  <h1 class="text-3xl font-bold mb-2">{product.title}</h1>
                  {reviewStats && (
                    <div class="flex items-center gap-2 text-sm text-gray-600">
                      <div class="flex items-center">
                        <div 
                          class="flex text-yellow-400" 
                          aria-label={`Rated ${reviewStats.averageRating.toFixed(1)} out of 5 stars`}
                        >
                          {Array.from({ length: 5 }).map((_, i) => {
                            const starValue = i + 1;
                            const ratingDiff = reviewStats.averageRating - i;
                            
                            return (
                              <span 
                                class={`transition-colors duration-200 ${
                                  ratingDiff >= 1 
                                    ? 'text-yellow-400' 
                                    : ratingDiff > 0 
                                    ? 'relative inline-block'
                                    : 'text-gray-300'
                                }`}
                              >
                                {ratingDiff > 0 && ratingDiff < 1 ? (
                                  <>
                                    <span 
                                      class="absolute text-yellow-400" 
                                      style={`clip-path: inset(0 ${100 - (ratingDiff * 100)}% 0 0);`}
                                    >
                                      ★
                                    </span>
                                    <span class="text-gray-300">☆</span>
                                  </>
                                ) : ratingDiff >= 1 ? '★' : '☆'}
                              </span>
                            );
                          })}
                        </div>
                        <span class="ml-1">{reviewStats.averageRating.toFixed(1)}</span>
                      </div>
                      <span>•</span>
                      <a 
                        href="#reviews" 
                        class="hover:text-blue-500 transition-colors duration-200 group"
                      >
                        <span>{reviewStats.totalReviews}</span>
                        <span class="ml-1">
                          {reviewStats.totalReviews === 1 ? 'Review' : 'Reviews'}
                        </span>
                        <span class="inline-block transition-transform group-hover:translate-x-0.5">→</span>
                      </a>
                    </div>
                  )}
                </div>

                <AddToCart
                  client:load
                  product={processedProduct}
                  language={lang}
                />

                <!-- Add debug output in development -->
                {import.meta.env.DEV && (
                  <script define:vars={{ debug: processedProduct }}>
                    console.log('Product data passed to AddToCart:', debug);
                  </script>
                )}

                <!-- Product Description - Optimized for Dynamic Content -->
                <div class="bg-gradient-to-br from-gray-50 to-white rounded-xl p-6 shadow-sm">
                  <h2 class="text-2xl font-bold mb-4 text-gray-900 flex items-center gap-2">
                    <Info className="w-6 h-6 text-blue-600" />
                    Product Details
                  </h2>
                  <div 
                    set:html={product.descriptionHtml} 
                    class="
                      text-gray-700 
                      [&>p]:mb-6 
                      [&>p]:leading-relaxed 
                      [&>p]:text-base

                      [&>h2]:text-xl 
                      [&>h2]:font-bold 
                      [&>h2]:text-gray-900 
                      [&>h2]:mt-10 
                      [&>h2]:mb-6
                      [&>h2]:pb-2
                      [&>h2]:border-b
                      [&>h2]:border-gray-200

                      [&>h3]:text-xl 
                      [&>h3]:font-semibold 
                      [&>h3]:text-gray-800 
                      [&>h3]:mt-8 
                      [&>h3]:mb-4
                      [&>h3]:flex
                      [&>h3]:items-center
                      [&>h3]:gap-2

                      [&>h4]:text-lg 
                      [&>h4]:font-semibold 
                      [&>h4]:text-gray-800 
                      [&>h4]:mt-6 
                      [&>h4]:mb-3

                      [&>ul]:list-disc 
                      [&>ul]:ml-6 
                      [&>ul]:mb-6 
                      [&>ul>li]:mb-2
                      [&>ul>li]:text-gray-700

                      [&>ol]:list-decimal 
                      [&>ol]:ml-6 
                      [&>ol]:mb-6 
                      [&>ol>li]:mb-2
                      [&>ol>li]:text-gray-700

                      [&>strong]:font-bold
                      [&>strong]:text-gray-900

                      [&>em]:italic
                      
                      [&>a]:text-blue-600 
                      [&>a]:underline 
                      [&>a:hover]:text-blue-800

                      [&>blockquote]:pl-4 
                      [&>blockquote]:border-l-4 
                      [&>blockquote]:border-gray-200 
                      [&>blockquote]:italic
                      [&>blockquote]:text-gray-600
                      [&>blockquote]:my-6

                      [&>img]:rounded-lg
                      [&>img]:shadow-md
                      [&>img]:my-4

                      [&>table]:w-full
                      [&>table]:border-collapse
                      [&>table]:mb-6
                      [&>table]:bg-white
                      [&>table]:shadow-sm
                      [&>table]:rounded-lg
                      [&>table]:overflow-hidden
                      [&>table]:border
                      [&>table]:border-gray-200

                      [&>table>thead]:bg-gray-50
                      [&>table>thead>tr]:border-b
                      [&>table>thead>tr]:border-gray-200

                      [&>table>thead>tr>th]:px-6
                      [&>table>thead>tr>th]:py-3
                      [&>table>thead>tr>th]:text-left
                      [&>table>thead>tr>th]:font-semibold
                      [&>table>thead>tr>th]:text-gray-900
                      [&>table>thead>tr>th]:text-sm
                      [&>table>thead>tr>th]:uppercase
                      [&>table>thead>tr>th]:tracking-wider

                      [&>table>tbody>tr]:border-b
                      [&>table>tbody>tr]:border-gray-200
                      [&>table>tbody>tr]:last:border-b-0
                      [&>table>tbody>tr:hover]:bg-gray-50

                      [&>table>tbody>tr>td]:px-6
                      [&>table>tbody>tr>td]:py-4
                      [&>table>tbody>tr>td]:text-sm
                      [&>table>tbody>tr>td]:text-gray-700
                      [&>table>tbody>tr>td]:whitespace-normal

                      [&>table>tbody>tr>td:first-child]:font-medium
                      [&>table>tbody>tr>td:first-child]:text-gray-900

                      [&>table>tfoot]:bg-gray-50
                      [&>table>tfoot>tr]:border-t
                      [&>table>tfoot>tr]:border-gray-200
                      [&>table>tfoot>tr>td]:px-6
                      [&>table>tfoot>tr>td]:py-3
                      [&>table>tfoot>tr>td]:text-sm
                      [&>table>tfoot>tr>td]:font-semibold

                      [&>*:first-child]:mt-0
                      [&>*:last-child]:mb-0
                    "
                  />
                </div>

                <!-- Key Features List -->
                <KeyFeatures productTitle={product.title} language={lang} />

                <!-- Product Specifications -->
                <ProductSpecs productTitle={product.title} language={lang} />

                <!-- Size Chart Component -->
                <SizeChart productTitle={product.title} language={lang} />

                <!-- Reviews Component -->
                <Reviews language={lang} />

                <!-- Product FAQ Component -->
                <ProductFAQ productTitle={product.title} language={lang} />
              </div>
            </div>

            <!-- Related Products -->
            <div class="mt-16 border-t pt-16">
              <h2 class="text-2xl font-bold mb-8">Related Products</h2>
              <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                {relatedProducts.map((product) => (
                  <ProductCard
                    client:load
                    id={product.node.id}
                    title={product.node.title}
                    price={parseFloat(product.node.priceRange.minVariantPrice.amount)}
                    image={product.node.images.edges[0]?.node.url}
                    imageAlt={product.node.title}
                    description={product.node.description}
                    handle={product.node.handle}
                    lang={lang}
                  />
                ))}
              </div>
            </div>
          </main>
        </div>
        
        <div 
          id="loading-skeleton" 
          class="hidden"
          aria-hidden="true"
        >
          <ProductLoading />
        </div>
      </div>
      
      <script>
        class ProductPageManager {
          constructor() {
            this.content = document.getElementById('product-content');
            this.loading = document.getElementById('loading-skeleton');
            this.currentPath = window.location.pathname;
            this.isTransitioning = false;
            this.init();
          }

          init() {
            // Force content visible and loading hidden on init
            if (this.content && this.loading) {
              this.content.style.opacity = '1';
              this.content.style.display = 'block';
              this.loading.style.display = 'none';
            }

            // Only handle actual page navigation
            document.addEventListener('astro:before-preparation', (event) => {
              if (!event.to?.url) return;
              
              const newPath = new URL(event.to.url).pathname;
              if (newPath === this.currentPath) return;
              
              // Only show loading for product page navigation
              if (newPath.includes('/products/') && !this.isTransitioning) {
                this.isTransitioning = true;
                this.handleNavigation();
              }
            });

            // Reset after navigation
            document.addEventListener('astro:after-preparation', () => {
              if (this.isTransitioning) {
                this.isTransitioning = false;
                this.currentPath = window.location.pathname;
                this.showContent();
              }
            });

            // Prevent any scroll-based transitions
            window.addEventListener('scroll', (e) => {
              e.stopPropagation();
            }, { passive: true });

            // Clean up scroll listeners
            const cleanup = () => {
              window.removeEventListener('scroll', this.handleScroll);
            };
            document.addEventListener('astro:unmount', cleanup);
          }

          handleNavigation() {
            if (!this.isTransitioning) return;
            
            // Save scroll position
            sessionStorage.setItem('scrollPosition', window.scrollY.toString());
            
            this.content.style.opacity = '0';
            this.content.style.pointerEvents = 'none';
            
            requestAnimationFrame(() => {
              this.loading.style.display = 'block';
              this.loading.style.opacity = '1';
            });
          }

          showContent() {
            if (!this.content || !this.loading) return;
            
            this.loading.style.opacity = '0';
            this.loading.style.display = 'none';
            
            requestAnimationFrame(() => {
              this.content.style.opacity = '1';
              this.content.style.pointerEvents = 'auto';
              
              // Restore scroll position if exists
              const savedPosition = sessionStorage.getItem('scrollPosition');
              if (savedPosition) {
                window.scrollTo(0, parseInt(savedPosition));
                sessionStorage.removeItem('scrollPosition');
              }
            });
          }
        }

        // Initialize only once
        let pageManager;
        if (!window.productPageManager) {
          window.productPageManager = new ProductPageManager();
        }
      </script>
    </Layout>
  </body>
</html>

<script>
  class ImageGallery {
    mainImage: HTMLImageElement | null;
    thumbnails: NodeListOf<HTMLElement>;
    prevButton: HTMLButtonElement | null;
    nextButton: HTMLButtonElement | null;
    currentIndex: number = 0;
    maxIndex: number;

    constructor() {
      this.mainImage = document.getElementById('mainImage') as HTMLImageElement;
      this.thumbnails = document.querySelectorAll('[data-image-url]');
      this.prevButton = document.getElementById('prevImage') as HTMLButtonElement;
      this.nextButton = document.getElementById('nextImage') as HTMLButtonElement;
      this.maxIndex = this.thumbnails.length - 1;
      this.init();
    }

    init() {
      if (!this.mainImage || !this.prevButton || !this.nextButton) return;

      // Add click handlers for navigation buttons
      this.prevButton.addEventListener('click', (e) => {
        e.preventDefault();
        this.navigate('prev');
      });
      
      this.nextButton.addEventListener('click', (e) => {
        e.preventDefault();
        this.navigate('next');
      });

      // Add keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          e.preventDefault();
          this.navigate('prev');
        }
        if (e.key === 'ArrowRight') {
          e.preventDefault();
          this.navigate('next');
        }
      });

      // Add touch swipe navigation
      let touchStartX = 0;
      let touchEndX = 0;

      this.mainImage.addEventListener('touchstart', (e) => {
        touchStartX = e.changedTouches[0].screenX;
      }, { passive: true });

      this.mainImage.addEventListener('touchend', (e) => {
        touchEndX = e.changedTouches[0].screenX;
        if (touchStartX - touchEndX > 50) this.navigate('next');
        if (touchStartX - touchEndX < -50) this.navigate('prev');
      }, { passive: true });

      // Add click handlers for thumbnails
      this.thumbnails.forEach((thumb, index) => {
        thumb.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          this.setImage(index);
        });
      });

      // Listen for variant changes
      window.addEventListener('variantImageChange', (event: CustomEvent) => {
        const { imageUrl, imageId } = event.detail;
        const matchingThumb = Array.from(this.thumbnails)
          .find(thumb => thumb.dataset.imageId === imageId);

        if (matchingThumb) {
          const index = parseInt(matchingThumb.dataset.imageIndex || '0');
          this.setImage(index);
        } else if (imageUrl && this.mainImage) {
          this.mainImage.src = imageUrl;
        }
      });

      // Initial button state
      this.updateNavigationButtons();
    }

    navigate(direction: 'prev' | 'next') {
      if (direction === 'prev' && this.currentIndex > 0) {
        this.setImage(this.currentIndex - 1);
      } else if (direction === 'next' && this.currentIndex < this.maxIndex) {
        this.setImage(this.currentIndex + 1);
      }
    }

    setImage(index: number) {
      if (!this.mainImage) return;
      
      const thumb = this.thumbnails[index];
      if (!thumb) return;

      // Update main image with responsive attributes
      this.mainImage.src = thumb.dataset.imageUrl || '';
      this.mainImage.srcset = thumb.dataset.imageSrcset || '';
      this.mainImage.alt = thumb.querySelector('img')?.alt || '';

      // Update thumbnail states
      this.thumbnails.forEach((t, i) => {
        t.classList.toggle('ring-2', i === index);
        t.classList.toggle('ring-blue-500', i === index);
      });

      this.currentIndex = index;
      this.updateNavigationButtons();
    }

    updateNavigationButtons() {
      if (!this.prevButton || !this.nextButton) return;
      
      this.prevButton.disabled = this.currentIndex === 0;
      this.nextButton.disabled = this.currentIndex === this.maxIndex;
    }
  }

  // Initialize gallery
  new ImageGallery();

  // Listen for variant changes
  window.addEventListener('variantImageChange', (event: CustomEvent) => {
    const { imageUrl, imageId } = event.detail;
    const mainImage = document.getElementById('mainImage') as HTMLImageElement;
    if (mainImage && imageUrl) {
      // Update main image with responsive attributes
      mainImage.src = `${imageUrl}&width=800`;
      mainImage.srcset = `
        ${imageUrl}&width=400 400w,
        ${imageUrl}&width=800 800w,
        ${imageUrl}&width=1200 1200w
      `;
    }
  });
</script>

<style>
  /* Hide scrollbar but keep functionality */
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>

<style>
  #product-wrapper {
    min-height: 100vh;
    isolation: isolate;
  }
  
  #loading-skeleton {
    position: fixed;
    inset: 0;
    z-index: 100;
    background: white;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease-in-out;
  }
  
  #product-content {
    position: relative;
    z-index: 1;
    transition: opacity 0.3s ease-in-out;
  }

  /* Prevent any transition triggers from scroll */
  html, body {
    scroll-behavior: smooth;
    overscroll-behavior: none;
  }
</style>

<script>
  document.addEventListener('currencyChange', (event) => {
    // Force re-render of price components
    window.dispatchEvent(new Event('priceUpdate'));
  });
</script>

<style>
  @keyframes starFill {
    from { clip-path: inset(0 100% 0 0); }
    to { clip-path: inset(0 0 0 0); }
  }
  
  .text-yellow-400 {
    animation: starFill 0.3s ease-out forwards;
  }
</style>